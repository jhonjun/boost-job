[/
          Copyright Oliver Kowalke 2015.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[section:topology Topology]

[heading Synopsis]

    #include <boost/job/all.hpp>

    namespace boost {
    namespace jobs {

    struct topo_t {
        uint32_t                node_id;
        uint32_t                processor_id;
        std::set< uint32_t >    l1_shared_with;
        std::set< uint32_t >    l2_shared_with;
        std::set< uint32_t >    l3_shared_with;
    };

    std::vector< topo_t > cpu_topology();

    namespace this_worker {

    topo_t topology() noexcept;

    }}}

__boost_job__ provides function __cpu_topology__ to inspect which logical processors
are online. The returned structure contains the ID of logical processor [footnote On
Windows] are online, the ID of the NUMA node to which the logical processor belongs
and with which other logical processors L1/L2/L3 cache is shared [footnote not all
platforms supported].
This information is used internally to pin worker threads to logical processors and
which logical processor is appropriate for a job (memory latency).

[#class_topo_t]
[section:topo_t Class `topo_t`]

    #include <boost/job/topology.hpp>

    namespace boost {
    namespace jobs {

    struct topo_t {
        uint32_t                node_id;
        uint32_t                processor_id;
        std::set< uint32_t >    l1_shared_with;
        std::set< uint32_t >    l2_shared_with;
        std::set< uint32_t >    l3_shared_with;
    };

    std::vector< topo_t > cpu_topology();

    }}

[function_heading cpu_topology]

    std::vector< topo_t > cpu_topology();

[variablelist
[[Returns:] [vector of topo_t structures of logical processors, which are online.]]
]

[endsect] [/ section Class topo_t]

[section:this_worker Namespace this_worker]

    namespace boost {
    namespace jobs {
    namespace this_worker {

    topo_t topology() noexcept;

    }}}

[ns_function_heading this_worker..topology()]

    #include <boost/job/operations.hpp>

    topo_t topology() noexcept;

[variablelist
[[Returns:] [the topo_t struct associated with the current worker-thread.]]
[[Throws:] [Nothing.]]
]

[endsect] [/ section Namespace this_worker]


[endsect]
